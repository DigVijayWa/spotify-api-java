/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.java_websocket.client.WebSocketClient;
import org.java_websocket.drafts.Draft;
import org.java_websocket.handshake.ServerHandshake;
import org.json.JSONObject;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.net.*;
import java.util.UUID;

public class App {

  private static String state = generateUniqueId();

  private static String code = "";

  private static String authCode = "";

  private static String accessToken = "";

  private static String tokenType = "";

  private static Integer expirationTime = 0;

  private static String refreshToken = "";

  private static boolean readyForApiCalls = false;

  //deployed server
  private static String serverURL = "https://server-app.cfapps.sap.hana.ondemand.com";

  //in case the deployed server doesnt work
  private static String localServer = "http://localhost:3000";

  public App() {

  }

  public static void main(String[] args) throws URISyntaxException {
    //start the websocket with the server;
    webSocketConnection(state);

    try {
      Thread.sleep(5000);
    } catch (InterruptedException E) {
      E.printStackTrace();
    }
    callChrome(state);


    //call the music player GUI


  }

  private static void makeAuthorization(String state) {
    String clientId = "a6039cc0a4ea4d6e92b9e7e635282e79";
    String clientSecret = "7a5028d3410746ea97bd08066a3e37e8";

    String url = "https://accounts.spotify.com/api/token";
    String urlParameters = "grant_type=authorization_code&code=" + code
        + "&redirect_uri="+serverURL+"/callback&client_id=" + clientId + "&client_secret="
        + clientSecret + "&state=" + state;
    try {
      System.out.print("\n URL : " + url);
      byte[] postData = urlParameters.getBytes(StandardCharsets.UTF_8);
      int postDataLength = postData.length;
      URL urlcon = new URL(url);
      HttpURLConnection conn = (HttpURLConnection) urlcon.openConnection();
      conn.setDoOutput(true);
      conn.setInstanceFollowRedirects(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
      conn.setRequestProperty("charset", "utf-8");
      conn.setRequestProperty("Content-Length", Integer.toString(postDataLength));
      conn.setUseCaches(false);
      System.out.print("\n trying to write : ");
      try (DataOutputStream wr = new DataOutputStream(conn.getOutputStream())) {
        wr.write(postData);
        InputStream stream = conn.getInputStream();
        BufferedReader reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"), 8);
        String result = reader.readLine();
        System.out.print("\n Response : " + result);

        //now you need to JSON object the result;

        JSONObject jsonObject = new JSONObject(result);

        if (((String) jsonObject.get("access_token")).compareTo("") != 0
            && ((String) jsonObject.get("token_type")).compareTo("") != 0
            && ((Integer) jsonObject.get("expires_in")) != 0
            && ((String) jsonObject.get("refresh_token")).compareTo("") != 0) {

          System.out.print("Access tokens received");
          accessToken = (String) jsonObject.get("access_token");
          tokenType = (String) jsonObject.get("token_type");
          expirationTime = (Integer) jsonObject.get("expires_in");
          refreshToken = (String) jsonObject.get("refresh_token");

          readyForApiCalls = true;
        } else {
          System.out.println("Something went Wrong : error in URL");
        }
      }

    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private static void callChrome(String state) {
    String clientId = "a6039cc0a4ea4d6e92b9e7e635282e79";
    String url = "\"https://accounts.spotify.com/authorize?client_id=" + clientId
        + "&response_type=code&redirect_uri="+serverURL+"/callback&scope=user-read-private%20user-read-email&state="
        + state + "\"";
    System.out.print("URL : " + url);
    String startScript = "start chrome " + url;
    System.out.println("URL : " + startScript);
    try {
      Runtime.getRuntime().exec(new String[]{"cmd", "/c", "" + startScript});
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private static String generateUniqueId() {
    return UUID.randomUUID().toString();
  }

  private static void webSocketConnection(String state) {
    try {
      String socketUrl = "wss://server-app.cfapps.sap.hana.ondemand.com?state=";
      String webSocketURL = socketUrl + state;
      System.out.print("trying to connect : "+webSocketURL+"\n");
      WebSocketClient cc = new WebSocketClient(new URI(webSocketURL)) {
        @Override
        public void onMessage(String message) {
          JSONObject jsonObject = new JSONObject(message);
          if (((String) jsonObject.get("type")).compareTo("auth_1") == 0) {
            System.out.print("Auth 1 : " + jsonObject.get("key"));
            code = (String) jsonObject.get("key");
            makeAuthorization(code);
          } else if (((String) jsonObject.get("type")).compareTo("auth_2") == 0) {
            System.out.print("Auth 1 : " + jsonObject.get("key"));
          }
        }

        @Override
        public void onOpen(ServerHandshake handshake) {
          System.out.println("Connection Opened");
        }

        @Override
        public void onClose(int code, String reason, boolean remote) {
          System.out.print("\n Code : " + code + "\n Reason : " + reason+ "remote : "+remote);
          System.out.println("Connection Closed");
        }

        @Override
        public void onError(Exception ex) {
          ex.printStackTrace();
        }
      };

      cc.connect();
      //cc.send("HI");
    }catch(Exception e) {
      e.printStackTrace();
    }
  }

  public static boolean accessTokenIsExpired() {
    return readyForApiCalls;
  }
}
